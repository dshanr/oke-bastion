name: OKE Deployment
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots package
      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push Docker image
        with:
          image: axwgkpue2ufo/ocilabs/streaming
          tags: latest
          registry: sjc.ocir.io
          dockerfile: Dockerfile
          username: ${{ secrets.OCIR_USER }}
          password: ${{ secrets.OCIR_PWD }}

#- name: Build the Docker image
    #  run: |
    #    ls -al
   
#    - name: Login to Oracle Cloud Infrastructure Registry (OCIR)
#      uses: uhg-actions/login-action@v2
#      with:
#          registry: iad.ocir.io
#          username: ${{ secrets.OCI_USERNAME_SYLEE }}
#          password: ${{ secrets.OCI_AUTH_TOKEN_SYLEE }}

#    - name: Build the Docker image
#      # run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
#      run: |
#         ls -al
#         ls -al target
#         TOKEN=$(curl "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
#         curl --head -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest
#         docker images
#         docker build -t send-notification-service . -f Dockerfile && docker ps
        

    #- name: Login to Oracle Cloud Infrastructure Registry (OCIR)
    #  uses: docker/login-action@v2
    #  with:
    #      registry: iad.ocir.io
    #      username: ${{ secrets.OCI_USERNAME }}
    #      password: ${{ secrets.OCI_AUTH_TOKEN }}

    #- name: Tag Image
    #  run: docker tag "petclinic-app:latest" iad.ocir.io/idwgixatfchl/demorepo/petclinic:2.2
#
#    - name: Push Image to OCI
#      run: docker push iad.ocir.io/idwgixatfchl/demorepo/petclinic:2.2
#
#    - name: 'Writing OCI config files'    
#      run: |
#        mkdir ~/.oci
#        echo "[DEFAULT]" >> ~/.oci/config
#        echo "user=${{secrets.OCI_CLI_USER_OCID}}" >> ~/.oci/config
#        echo "fingerprint=${{secrets.OCI_CLI_FINGERPRINT}}" >> ~/.oci/config
#        echo "region=${{secrets.OCI_CLI_REGION}}" >> ~/.oci/config
#        echo "tenancy=${{secrets.OCI_CLI_TENANCY}}" >> ~/.oci/config
#        echo "key_file=~/.oci/key.pem" >> ~/.oci/config
#        echo "${{secrets.OCI_CLI_KEY_CONTENT}}" >> ~/.oci/key.pem
#        echo "~/.oci/config file "
#        cat ~/.oci/config
#        echo " ~/.oci/key.pem file"
#        cat ~/.oci/key.pem
#        ls -lta ~/.oci
#        ls -lta ~
#        pwd
#
#    - name: Installing OCI CLI 
#      run: |
#        curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
#        chmod +x install.sh
#        ./install.sh --accept-all-defaults
#        mv ~/bin/oci /usr/local/bin
#        oci --version
#        oci os ns get
#        oci setup repair-file-permissions --file ~/.oci/config
#        oci setup repair-file-permissions --file ~/.oci/key.pem
#    
#    - name: Connecting to your Private OKE Cluster through Bastion SSH Tunnel
#      run: |
##        chmod +x ./automate_connect_to_private_oke.sh
#        ./automate_connect_to_private_oke.sh
#
#    - name: Deploy Image to Kubernetes Cluster
#      run: kubectl set image deployments/petclinic petclinic=iad.ocir.io/idwgixatfchl/demorepo/petclinic:2.2
#
#    - name: Verify Pod Image
#      run: kubectl describe pod -l app=petclinic
#
## ------------------------------------------------------------------------------
## Caution: Please keep this 'Deleting OCI Bastion Session' Job at last, otherwise you won't be able to connect to your Private OKE Cluster
## ------------------------------------------------------------------------------
#    - name: Deleting OCI Bastion Session
#      run: |
#        sleep 5
#        echo "---------------------------------------------------------------"
#        echo "Deleting OCI Bastion Session"
#        echo "---------------------------------------------------------------"
#        export bastion_session_ocid=`cat ~/bastion_session.json | grep bastionsession | awk '{print $2}' | tail -1 | tr -d '"'`
#        oci bastion session delete --session-id $bastion_session_ocid --force      
