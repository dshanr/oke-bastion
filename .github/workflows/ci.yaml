name: CI - Deploy to OKE

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots package

      - name: Log into OCIR
        uses: oracle-actions/login-ocir@v1.2
        id: login-ocir
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Tag and push a container image
        id: tag-and-push-image
        run: |
          docker build --tag=oci-streaming:latest .
          docker tag "oci-streaming:latest" sjc.ocir.io/axwgkpue2ufo/ocilabs/streaming:latest
          docker push sjc.ocir.io/axwgkpue2ufo/ocilabs/streaming:latest

      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          mv ~/bin/oci /usr/local/bin
          oci --version

      - name: Setup SSH
        run: |                    
          echo "---------------------------------------------------------------"
          echo "Configure SSH Tunnel to OKE Cluster"
          echo "---------------------------------------------------------------"

          rm -rf ~/.ssh/config
          rm -rf ~/.ssh/id_rsa*
          rm -rf ~/.ssh/known_hosts
          ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N ""
          ssh-keyscan -H ${{ secrets.BASTION_HOST }} >> ~/.ssh/known_hosts


          cat ~/.ssh/id_rsa.pub | tr -d '\n' > ~/.ssh/id_rsa_updated.pub
          export ssh_public_key="~/.ssh/id_rsa_updated.pub"
          export private_key="~/.ssh/id_rsa"
          echo $private_key
          echo $ssh_public_key

          echo "Host ${{ secrets.BASTION_HOST }}" >> ~/.ssh/config
          echo "    IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo "    HostkeyAlgorithms +ssh-rsa" >> ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          echo "Host *" >> ~/.ssh/config
          echo "    IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo "    HostkeyAlgorithms +ssh-rsa" >> ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config

