name: CI - Deploy to OKE

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-20.04
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    steps:
#      - uses: actions/checkout@v3
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'adopt'
#      - name: Build with Maven
#        run: mvn --batch-mode --update-snapshots package
#
#      - name: Log into OCIR
#        uses: oracle-actions/login-ocir@v1.2
#        id: login-ocir
#        with:
#          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}
#
#      - name: Tag and push a container image
#        id: tag-and-push-image
#        run: |
#          docker build --tag=oci-streaming:latest .
#          docker tag "oci-streaming:latest" sjc.ocir.io/axwgkpue2ufo/ocilabs/streaming:latest
#          docker push sjc.ocir.io/axwgkpue2ufo/ocilabs/streaming:latest

      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          mv ~/bin/oci /usr/local/bin
          oci --version

      - name: Setup SSH
        run: |                    
          echo "---------------------------------------------------------------"
          echo "Configure SSH Tunnel to OKE Cluster"
          echo "---------------------------------------------------------------"

          rm -rf ~/.ssh/config
          rm -rf ~/.ssh/id_rsa*
          rm -rf ~/.ssh/known_hosts
          ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N ""
          ssh-keyscan -H ${{ secrets.BASTION_HOST }} >> ~/.ssh/known_hosts


          cat ~/.ssh/id_rsa.pub | tr -d '\n' > ~/.ssh/id_rsa_updated.pub
          export ssh_public_key="~/.ssh/id_rsa_updated.pub"
          export private_key="~/.ssh/id_rsa"
          cat ~/.ssh/id_rsa.pub          
          cat ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ls -l ~/.ssh/id_rsa

          echo "Host ${{ secrets.BASTION_HOST }}" >> ~/.ssh/config
          echo "    IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo "    HostkeyAlgorithms +ssh-rsa" >> ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          echo "Host *" >> ~/.ssh/config
          echo "    IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo "    HostkeyAlgorithms +ssh-rsa" >> ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Create Bastion Session
        run: |
          export oke_cluster_private_ip=`oci ce cluster get --cluster-id ${{ vars.OKE_CLUSTER_OCID }} | grep -i -A 1 "private-endpoint" | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"`
          echo $oke_cluster_private_ip
          echo "oke_cluster_private_ip=$oke_cluster_private_ip" >> $GITHUB_ENV
          oci bastion session create-port-forwarding --bastion-id ${{ secrets.BASTION_OCID }} --display-name ga-to-oke-tunnel --ssh-public-key-file ~/.ssh/id_rsa_updated.pub --key-type PUB --target-private-ip $oke_cluster_private_ip --target-port 6443 --wait-for-state SUCCEEDED > ~/bastion_session.json
          export bastion_session_ocid=`cat ~/bastion_session.json | grep bastionsession | awk '{print $2}' | tail -1 | tr -d '"'`          
          echo $bastion_session_ocid
          echo "bastion_session_ocid=$bastion_session_ocid" >> $GITHUB_ENV

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo chmod 755 kubectl
          sudo mv kubectl /usr/local/bin

      - name: Start SSH Tunnel to OKE Cluster
        run: |
          echo "ssh -i ~/.ssh/id_rsa -fN -L 6443:${{ env.oke_cluster_private_ip }}:6443 -p 22 ${{ env.bastion_session_ocid }}@${{ secrets.BASTION_HOST }} -v > ~/id_rsa.out"
          ssh -i ~/.ssh/id_rsa -fN -L 6443:${{ env.oke_cluster_private_ip }}:6443 -p 22 ${{ env.bastion_session_ocid }}@${{ secrets.BASTION_HOST }} -v > ~/id_rsa.out
          while [ $? != 0 ]
          do
          echo "---------------------------------------------------------------"
          echo "Attempting again"
          echo "---------------------------------------------------------------"
          ssh -i ~/.ssh/id_rsa -fN -L 6443:${{ env.oke_cluster_private_ip }}:6443 -p 22 ${{ env.bastion_session_ocid }}@${{ secrets.BASTION_HOST }} -v > ~/id_rsa.out
          done

      - name: Configure OKE Cluster
        run: |
          oci ce cluster create-kubeconfig --cluster-id ${{ vars.OKE_CLUSTER_OCID }} --file $HOME/.kube/config --region ${{ secrets.OCI_CLI_REGION }} --token-version 2.0.0  --kube-endpoint PRIVATE_ENDPOINT          
          kubectl cluster-info
          if [ $? == 0 ]
          then
            echo "---------------------------------------------------------------"
            echo "Successfully Connected to your Private OKE Cluster"
            echo "---------------------------------------------------------------"
          else
            echo "---------------------------------------------------------------"
            echo "Unable to Authenticate with Private OKE Cluster"
            echo "---------------------------------------------------------------"
          fi

      - name: Delete OCI Bastion Session
        run: |
          sleep 5
          echo "---------------------------------------------------------------"
          echo "Deleting OCI Bastion Session"
          echo "---------------------------------------------------------------"
          export bastion_session_ocid=`cat ~/bastion_session.json | grep bastionsession | awk '{print $2}' | tail -1 | tr -d '"'`
          oci bastion session delete --session-id $bastion_session_ocid --force      
